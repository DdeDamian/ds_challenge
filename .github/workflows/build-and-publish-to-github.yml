name: Build and Deploy

on:
  push:
    branches:
      - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    steps:
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image.
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}} 
            type=semver,pattern={{major}}.{{minor}}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/frontend
          dockerfile: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-eks:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    environment:
      name: development
    steps:

      - name: Set Environment Variable
        run: |
          if [ "${{ github.ref }}" = "refs/heads/development" ]; then
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Helm, Helmfile, Helm Secrets, Helm Diff and sops
        run: |
          # Install Helm
          echo "Installing Helm"
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
  
          # Install Helmfile
          wget https://github.com/helmfile/helmfile/releases/download/v0.161.0/helmfile_0.161.0_linux_amd64.tar.gz
          tar -xvf helmfile_0.161.0_linux_amd64.tar.gz
          sudo mv helmfile /usr/local/bin/helmfile
          chmod +x /usr/local/bin/helmfile
  
          # Install Helm Secrets
          echo "Installing Helm Secrets"
          helm plugin install https://github.com/jkroepke/helm-secrets --version v4.5.1

          # Install Helm Diff
          echo "Installing Helm Diff"          
          helm plugin install https://github.com/databus23/helm-diff

          # Install sops
          echo "Installing sops"
          curl -LO https://github.com/getsops/sops/releases/download/v3.8.1/sops-v3.8.1.linux.amd64
          mv sops-v3.8.1.linux.amd64 /usr/local/bin/sops
          chmod +x /usr/local/bin/sops
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ vars.AWS_GH_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GH_SECRET_ACCESS_KEY }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name aifinyo-${{ env.ENVIRONMENT }}-eks-cluster

      - name: Deploy to EKS using Helmfile
        run: |
          cd helm
          helmfile --environment ${{ env.ENVIRONMENT }} apply